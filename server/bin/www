#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const clientSocketUsers = require("../clientSocketUsers");
const { ConversationLog } = require("../db/models");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

const unreadMessages = {};
const lastSeenMessages = {};
io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
        // retrieve unreadMessages and lastSeenMessages for each user
        ConversationLog.findUnreadMessages(id).then(convs=>{
            unreadMessages[id] = {};
            lastSeenMessages[id] = {};
            convs.map((conversation) => {
                unreadMessages[id][conversation.conversationId] = conversation.unreadMessages;
                lastSeenMessages[id][conversation.conversationId] = conversation.lastSeenMessage

            });
        })
    }
    clientSocketUsers[id] = socket.id;
    clientSocketUsers.getUserContacts(id).then(response => {
      response.contacts.forEach(contact => {
        socket.to(clientSocketUsers[contact.id]).emit("add-online-user", id);
      });
      response.conversations.forEach(conv => {
        socket.join(conv);
      })
    });

  });

  socket.on("new-message", (data) => {
    socket.to(data.message.conversationId).emit("new-message", {
      message: data.message,
      sender: data.sender,
    });
      // update unreadMessages for each user
      if (!(data.recipientId in unreadMessages)) {
          unreadMessages[data.recipientId] = {};
          unreadMessages[data.recipientId][data.message.conversationId] = [];
      }
      else if (!(data.message.conversationId in unreadMessages[data.recipientId])) {
          unreadMessages[data.recipientId][data.message.conversationId] = [];
      }
      unreadMessages[data.recipientId][data.message.conversationId].push(data.message.id);

      socket.broadcast.emit("unread", {
          recipientId: data.recipientId,
          conversations: unreadMessages[data.recipientId],
      });

      // commit the changes of unreadMessages to db
      ConversationLog.upsert({
          userId: data.recipientId,
          conversationId: data.message.conversationId,
          unreadMessages: unreadMessages[data.recipientId][data.message.conversationId]
      });

  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      delete clientSocketUsers[id];
      clientSocketUsers.getUserContacts(id).then(response => {
        response.contacts.forEach(contact => {
          socket.to(clientSocketUsers[contact.id]).emit("remove-offline-user", id);
        });
        response.conversations.forEach(conv => {
          socket.leave(conv);
        })
      });
    }
  });

  socket.on("typing", (data) => {
    socket.to(data.conversationId).emit("typing", data);
  });
    socket.on("read", (data) => {

        // update unreadMessages for each user
        if (unreadMessages[data.userId][data.conversationId].includes(data.messageId)) {
            msgIndex = unreadMessages[data.userId][data.conversationId].indexOf(data.messageId);
            unreadMessages[data.userId][data.conversationId].splice(msgIndex, 1);
        }

        // update lastSeenMessages for each user
        if (!(data.userId in lastSeenMessages)) {
            lastSeenMessages[data.userId] = {};
        }

        if (!(data.conversationId in lastSeenMessages[data.userId])){
            lastSeenMessages[data.userId][data.conversationId] = data.messageId;
        }
        else if(lastSeenMessages[data.userId][data.conversationId] < data.messageId ){
            lastSeenMessages[data.userId][data.conversationId] = data.messageId;
        }
        socket.broadcast.emit("seen", {
            conversationId: data.conversationId,
            messageId: lastSeenMessages[data.userId][data.conversationId],
        });

        // commit the changes of unreadMessages and lastSeenMessages to db
        ConversationLog.upsert({
            userId: data.userId,
            conversationId: data.conversationId,
            unreadMessages: unreadMessages[data.userId][data.conversationId],
            lastSeenMessage: lastSeenMessages[data.userId][data.conversationId]});
    });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
